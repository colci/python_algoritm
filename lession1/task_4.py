"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

#Вариант №1
# O(log n)
def check_login_password(login, password):
    db_users = {'alex':['123',0],
                'bob':['321',1],
                'max':['asd',0],
                'stan':['sadas',1]}

    acaunt_value = db_users.get(login)

    if acaunt_value is None:
        return "Такой логин не зарегистрирован"
    else:
        if acaunt_value[1] == 1 and acaunt_value[0] == password:
            return "Поздровляю! Вы авторизировались."
        elif acaunt_value[1] == 0:
            return "Ваша учетная запись, не активна. Пройдите активацию."
        elif acaunt_value[1] == 1 and acaunt_value[0] != password:
            return "Вы не прошли авторизацию. Пароль неверный!"
# O(n)
def check_login_password2(login, password):
    db_users = {'alex': ['123', 0],
                'bob':  ['321', 1],
                'max':  ['asd', 0],
                'stan': ['sadas', 1]}

    for key, value in db_users.items():
        if key == login:
            if value[1] == 1:
                if value[0] == password:
                    return "Поздровляю! Вы авторизировались."
                else:
                    return "Вы не прошли авторизацию. Пароль неверный!"
            else:
                return "Ваша учетная запись, не активна. Пройдите активацию."
    return "Такой логин не зарегистрирован"


def pass_authentication():
    while True:
        login = input("Введите логин: ").lower()
        if login.isspace():
            print("Ошибка. Логин содержит пробелы")
        else:
            break

    password = input("Введите пароль: ")
    print(check_login_password(login, password))
    print(check_login_password2(login, password))


pass_authentication()

"""Первый вариант более оптимален так как происходит поиск по ключу(бинарный поиск), данное поле индексируется"""